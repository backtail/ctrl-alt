def generate_stm8s_conf_header(
    output_file="stm8s_conf.h",
    autogenerated_dependencies=None
):
    if autogenerated_dependencies is None:
        autogenerated_dependencies = []

    header_guard = "__STM8S_CONF_H"
    static_includes = [
        '#include "stm8s.h"',
        '#include "user_program.h"',
        '#include "hw_config.h"'
    ]

    with open(output_file, "w") as f:
        f.write(f"#ifndef {header_guard}\n")
        f.write(f"#define {header_guard}\n\n")
        
        # Static includes before autogenerated section
        f.write(f"{static_includes[0]}\n")
        f.write(f"{static_includes[1]}\n\n")
        
        # Autogenerated dependencies
        f.write("// start of autogenerated depencenies collected from codebase and program combination\n")
        for dep in autogenerated_dependencies:
            print(dep)
            f.write(f'#include "{dep}"\n')
        f.write("// end of autogenerated depencenies collected from codebase and program combination\n\n")
        
        # Static include after autogenerated section
        f.write(f"{static_includes[2]}\n\n")

        # Macro definition
        f.write("#define assert_param(expr) ((void)0)\n\n")
        
        f.write(f"#endif /* {header_guard} */\n")